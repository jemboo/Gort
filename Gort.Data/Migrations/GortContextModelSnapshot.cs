// <auto-generated />
using System;
using Gort.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gort.Data.Migrations
{
    [DbContext(typeof(GortContext))]
    partial class GortContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.Property<Guid>("CauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid?>("SortableSetWorkspaceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("char(36)");

                    b.HasKey("CauseId");

                    b.HasIndex("CauseTypeId");

                    b.HasIndex("SortableSetWorkspaceId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Causes");
                });

            modelBuilder.Entity("Gort.Data.CauseParam", b =>
                {
                    b.Property<Guid>("CauseParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeParamId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SorterCauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseParamId");

                    b.HasIndex("CauseId");

                    b.HasIndex("CauseTypeParamId");

                    b.HasIndex("SorterCauseId");

                    b.ToTable("CauseParams");
                });

            modelBuilder.Entity("Gort.Data.CauseType", b =>
                {
                    b.Property<Guid>("CauseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseTypeId");

                    b.HasIndex("CauseTypeGroupId");

                    b.ToTable("CauseTypes");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeGroup", b =>
                {
                    b.Property<Guid>("CauseTypeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("CauseTypeGroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("CauseTypeGroups");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeParam", b =>
                {
                    b.Property<Guid>("CauseTypeParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseTypeParamId");

                    b.HasIndex("CauseTypeId");

                    b.ToTable("CauseTypeParams");
                });

            modelBuilder.Entity("Gort.Data.PerfBinSet", b =>
                {
                    b.Property<Guid>("CauseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseTypeId");

                    b.HasIndex("CauseTypeGroupId");

                    b.ToTable("PerfBinSets");
                });

            modelBuilder.Entity("Gort.Data.RndGen", b =>
                {
                    b.Property<Guid>("RndGenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Seed")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RndGenId");

                    b.ToTable("RndGens");
                });

            modelBuilder.Entity("Gort.Data.SortableSet", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WorkspaceId");

                    b.ToTable("SortableSets");
                });

            modelBuilder.Entity("Gort.Data.Sorter", b =>
                {
                    b.Property<Guid>("CauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("char(36)");

                    b.HasKey("CauseId");

                    b.HasIndex("CauseTypeId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Sorters");
                });

            modelBuilder.Entity("Gort.Data.SorterSet", b =>
                {
                    b.Property<Guid>("CauseParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeParamId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseParamId");

                    b.HasIndex("CauseId");

                    b.HasIndex("CauseTypeParamId");

                    b.ToTable("SorterSets");
                });

            modelBuilder.Entity("Gort.Data.Workspace", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WorkspaceId");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.HasOne("Gort.Data.CauseType", "CauseType")
                        .WithMany()
                        .HasForeignKey("CauseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.SortableSet", null)
                        .WithMany("Causes")
                        .HasForeignKey("SortableSetWorkspaceId");

                    b.HasOne("Gort.Data.Workspace", "Workspace")
                        .WithMany("Causes")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseType");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Gort.Data.CauseParam", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany("CauseParams")
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.CauseTypeParam", "CauseTypeParam")
                        .WithMany()
                        .HasForeignKey("CauseTypeParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.Sorter", null)
                        .WithMany("CauseParams")
                        .HasForeignKey("SorterCauseId");

                    b.Navigation("Cause");

                    b.Navigation("CauseTypeParam");
                });

            modelBuilder.Entity("Gort.Data.CauseType", b =>
                {
                    b.HasOne("Gort.Data.CauseTypeGroup", "CauseTypeGroup")
                        .WithMany()
                        .HasForeignKey("CauseTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseTypeGroup");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeGroup", b =>
                {
                    b.HasOne("Gort.Data.CauseTypeGroup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeParam", b =>
                {
                    b.HasOne("Gort.Data.CauseType", "CauseType")
                        .WithMany()
                        .HasForeignKey("CauseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseType");
                });

            modelBuilder.Entity("Gort.Data.PerfBinSet", b =>
                {
                    b.HasOne("Gort.Data.CauseTypeGroup", "CauseTypeGroup")
                        .WithMany()
                        .HasForeignKey("CauseTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseTypeGroup");
                });

            modelBuilder.Entity("Gort.Data.Sorter", b =>
                {
                    b.HasOne("Gort.Data.CauseType", "CauseType")
                        .WithMany()
                        .HasForeignKey("CauseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseType");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Gort.Data.SorterSet", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.CauseTypeParam", "CauseTypeParam")
                        .WithMany()
                        .HasForeignKey("CauseTypeParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");

                    b.Navigation("CauseTypeParam");
                });

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.Navigation("CauseParams");
                });

            modelBuilder.Entity("Gort.Data.SortableSet", b =>
                {
                    b.Navigation("Causes");
                });

            modelBuilder.Entity("Gort.Data.Sorter", b =>
                {
                    b.Navigation("CauseParams");
                });

            modelBuilder.Entity("Gort.Data.Workspace", b =>
                {
                    b.Navigation("Causes");
                });
#pragma warning restore 612, 618
        }
    }
}
