// <auto-generated />
using System;
using Gort.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gort.Data.Migrations
{
    [DbContext(typeof(GortContext))]
    [Migration("20220121024639_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.Property<int>("CauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CauseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("char(36)");

                    b.HasKey("CauseId");

                    b.HasIndex("CauseTypeId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Causes");
                });

            modelBuilder.Entity("Gort.Data.CauseParam", b =>
                {
                    b.Property<int>("CauseParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CauseId")
                        .HasColumnType("int");

                    b.Property<int>("NamedParamId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseParamId");

                    b.HasIndex("CauseId");

                    b.HasIndex("NamedParamId");

                    b.ToTable("CauseParam");
                });

            modelBuilder.Entity("Gort.Data.CauseType", b =>
                {
                    b.Property<int>("CauseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CauseTypeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseTypeId");

                    b.HasIndex("CauseTypeGroupId");

                    b.ToTable("CauseType");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeGroup", b =>
                {
                    b.Property<int>("CauseTypeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("CauseTypeGroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("CauseTypeGroups");
                });

            modelBuilder.Entity("Gort.Data.NamedParam", b =>
                {
                    b.Property<int>("NamedParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CauseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NamedParamId");

                    b.HasIndex("CauseTypeId");

                    b.ToTable("NamedParam");
                });

            modelBuilder.Entity("Gort.Data.Workspace", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WorkspaceId");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.HasOne("Gort.Data.CauseType", "CauseType")
                        .WithMany()
                        .HasForeignKey("CauseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.Workspace", "Workspace")
                        .WithMany("Causes")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseType");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Gort.Data.CauseParam", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany("CauseParams")
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.NamedParam", "NamedParam")
                        .WithMany()
                        .HasForeignKey("NamedParamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");

                    b.Navigation("NamedParam");
                });

            modelBuilder.Entity("Gort.Data.CauseType", b =>
                {
                    b.HasOne("Gort.Data.CauseTypeGroup", "CauseTypeGroup")
                        .WithMany()
                        .HasForeignKey("CauseTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseTypeGroup");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeGroup", b =>
                {
                    b.HasOne("Gort.Data.CauseTypeGroup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Gort.Data.NamedParam", b =>
                {
                    b.HasOne("Gort.Data.CauseType", "CauseType")
                        .WithMany()
                        .HasForeignKey("CauseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseType");
                });

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.Navigation("CauseParams");
                });

            modelBuilder.Entity("Gort.Data.Workspace", b =>
                {
                    b.Navigation("Causes");
                });
#pragma warning restore 612, 618
        }
    }
}
