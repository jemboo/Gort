// <auto-generated />
using System;
using Gort.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gort.Data.Migrations
{
    [DbContext(typeof(GortContext))]
    [Migration("20220328015844_gort")]
    partial class gort
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CauseTypeParamType", b =>
                {
                    b.Property<Guid>("CauseTypesCauseTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParamTypesParamTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("CauseTypesCauseTypeId", "ParamTypesParamTypeId");

                    b.HasIndex("ParamTypesParamTypeId");

                    b.ToTable("CauseTypeParamType");
                });

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.Property<Guid>("CauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CauseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CauseTypeID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("char(36)");

                    b.HasKey("CauseId");

                    b.HasIndex("CauseTypeID");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Cause");
                });

            modelBuilder.Entity("Gort.Data.CauseParam", b =>
                {
                    b.Property<Guid>("CauseParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParamTypeId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("CauseParamId");

                    b.HasIndex("CauseId");

                    b.HasIndex("ParamTypeId");

                    b.ToTable("CauseParam");
                });

            modelBuilder.Entity("Gort.Data.CauseType", b =>
                {
                    b.Property<Guid>("CauseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseTypeGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CauseTypeId");

                    b.HasIndex("CauseTypeGroupId");

                    b.ToTable("CauseType");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeGroup", b =>
                {
                    b.Property<Guid>("CauseTypeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("CauseTypeGroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("CauseTypeGroup");
                });

            modelBuilder.Entity("Gort.Data.ParamType", b =>
                {
                    b.Property<Guid>("ParamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ParamTypeId");

                    b.ToTable("ParamType");
                });

            modelBuilder.Entity("Gort.Data.RandGen", b =>
                {
                    b.Property<Guid>("RandGenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CausePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RndGenType")
                        .HasColumnType("int");

                    b.Property<int>("Seed")
                        .HasColumnType("int");

                    b.Property<Guid>("StructId")
                        .HasColumnType("char(36)");

                    b.HasKey("RandGenId");

                    b.HasIndex("CauseId");

                    b.ToTable("RandGen");
                });

            modelBuilder.Entity("Gort.Data.Sortable", b =>
                {
                    b.Property<Guid>("SortableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CausePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SortableFormat")
                        .HasColumnType("int");

                    b.Property<Guid?>("SortableSetId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StructId")
                        .HasColumnType("char(36)");

                    b.HasKey("SortableId");

                    b.HasIndex("CauseId");

                    b.ToTable("Sortable");
                });

            modelBuilder.Entity("Gort.Data.SortableSet", b =>
                {
                    b.Property<Guid>("SortableSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CausePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SortableFormat")
                        .HasColumnType("int");

                    b.Property<int>("SortableSetRep")
                        .HasColumnType("int");

                    b.Property<Guid>("StructId")
                        .HasColumnType("char(36)");

                    b.HasKey("SortableSetId");

                    b.HasIndex("CauseId");

                    b.ToTable("SortableSet");
                });

            modelBuilder.Entity("Gort.Data.Sorter", b =>
                {
                    b.Property<Guid>("SorterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CausePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("StructId")
                        .HasColumnType("char(36)");

                    b.HasKey("SorterId");

                    b.HasIndex("CauseId");

                    b.ToTable("Sorter");
                });

            modelBuilder.Entity("Gort.Data.SorterPerf", b =>
                {
                    b.Property<Guid>("SorterPerfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CausePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberFormat")
                        .HasColumnType("int");

                    b.Property<Guid>("SortableSetId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SorterId")
                        .HasColumnType("char(36)");

                    b.HasKey("SorterPerfId");

                    b.HasIndex("CauseId");

                    b.HasIndex("SortableSetId");

                    b.HasIndex("SorterId");

                    b.ToTable("SorterPerf");
                });

            modelBuilder.Entity("Gort.Data.SorterSet", b =>
                {
                    b.Property<Guid>("SorterSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CausePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SwitchLength")
                        .HasColumnType("int");

                    b.HasKey("SorterSetId");

                    b.HasIndex("CauseId");

                    b.ToTable("SorterSet");
                });

            modelBuilder.Entity("Gort.Data.SorterSetPerf", b =>
                {
                    b.Property<Guid>("SorterSetPerfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CausePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberFormat")
                        .HasColumnType("int");

                    b.Property<Guid>("SortableSetId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SorterSetId")
                        .HasColumnType("char(36)");

                    b.HasKey("SorterSetPerfId");

                    b.HasIndex("CauseId");

                    b.HasIndex("SortableSetId");

                    b.HasIndex("SorterSetId");

                    b.ToTable("SorterSetPerf");
                });

            modelBuilder.Entity("Gort.Data.Workspace", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("WorkspaceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Workspace");
                });

            modelBuilder.Entity("CauseTypeParamType", b =>
                {
                    b.HasOne("Gort.Data.CauseType", null)
                        .WithMany()
                        .HasForeignKey("CauseTypesCauseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.ParamType", null)
                        .WithMany()
                        .HasForeignKey("ParamTypesParamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.HasOne("Gort.Data.CauseType", "CauseType")
                        .WithMany()
                        .HasForeignKey("CauseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.Workspace", "Workspace")
                        .WithMany("Causes")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseType");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Gort.Data.CauseParam", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany("CauseParams")
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.ParamType", "ParamType")
                        .WithMany()
                        .HasForeignKey("ParamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");

                    b.Navigation("ParamType");
                });

            modelBuilder.Entity("Gort.Data.CauseType", b =>
                {
                    b.HasOne("Gort.Data.CauseTypeGroup", "CauseTypeGroup")
                        .WithMany()
                        .HasForeignKey("CauseTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseTypeGroup");
                });

            modelBuilder.Entity("Gort.Data.CauseTypeGroup", b =>
                {
                    b.HasOne("Gort.Data.CauseTypeGroup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Gort.Data.RandGen", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");
                });

            modelBuilder.Entity("Gort.Data.Sortable", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");
                });

            modelBuilder.Entity("Gort.Data.SortableSet", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");
                });

            modelBuilder.Entity("Gort.Data.Sorter", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");
                });

            modelBuilder.Entity("Gort.Data.SorterPerf", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.SortableSet", "SortableSet")
                        .WithMany()
                        .HasForeignKey("SortableSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.Sorter", "Sorter")
                        .WithMany()
                        .HasForeignKey("SorterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");

                    b.Navigation("SortableSet");

                    b.Navigation("Sorter");
                });

            modelBuilder.Entity("Gort.Data.SorterSet", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");
                });

            modelBuilder.Entity("Gort.Data.SorterSetPerf", b =>
                {
                    b.HasOne("Gort.Data.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.SortableSet", "SortableSet")
                        .WithMany()
                        .HasForeignKey("SortableSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gort.Data.SorterSet", "SorterSet")
                        .WithMany()
                        .HasForeignKey("SorterSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");

                    b.Navigation("SortableSet");

                    b.Navigation("SorterSet");
                });

            modelBuilder.Entity("Gort.Data.Cause", b =>
                {
                    b.Navigation("CauseParams");
                });

            modelBuilder.Entity("Gort.Data.Workspace", b =>
                {
                    b.Navigation("Causes");
                });
#pragma warning restore 612, 618
        }
    }
}
